name: Build and Publish to PyPI

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get latest version from PyPI
        id: get_pypi_version
        run: |
          PACKAGE_NAME="kurirogram"
          VERSION=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json | jq -r '.info.version')
          echo "pypi_version=${VERSION}" >> $GITHUB_ENV

      - name: Get latest tag from GitHub
        id: get_github_tag
        run: |
          TAGS_URL="https://api.github.com/repos/KurimuzonAkuma/pyrogram/tags"
          github_tag=$(curl -s $TAGS_URL | jq -r '.[0].name' | sed 's/^v//')
          echo "github_tag=${github_tag}" >> $GITHUB_ENV

      - name: Compare tags and decide if update is needed
        id: check_update
        run: |
          # Compare the GitHub tag with the current PyPI version
          if [ "$(printf '%s\n' "$github_tag" "$pypi_version" | sort -V | tail -n 1)" != "$pypi_version" ]; then
            echo "new_tag_found=true" >> $GITHUB_ENV
          else
            echo "new_tag_found=false" >> $GITHUB_ENV
          fi

      - name: Download and extract tar.gz of latest release
        if: ${{ env.new_tag_found == 'true' }}
        run: |
          DOWNLOAD_URL="https://github.com/KurimuzonAkuma/pyrogram/archive/refs/tags/v${{ env.github_tag }}.tar.gz"
          wget $DOWNLOAD_URL -O latest_release.tar.gz
          mkdir -p source
          tar -xzvf latest_release.tar.gz -C source --strip-components=1
          sed -i 's/\(name=\)"Kurigram"/\1"kurirogram"/' source/setup.py

      - name: Set up Python
        if: ${{ env.new_tag_found == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build dependencies
        if: ${{ env.new_tag_found == 'true' }}
        run: |
          pip install build

      - name: Build the package
        if: ${{ env.new_tag_found == 'true' }}
        working-directory: source
        run: |
          python -m build

      - name: Publish to PyPI
        if: ${{ env.new_tag_found == 'true' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        working-directory: source
        run: |
          pip install twine
          twine upload dist/*
